@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    box-shadow: inset $top $left $blur $color;
  } @else {
    box-shadow: $top $left $blur $color;
  }
}

@mixin button($bgcolor: null, $color: null, $mw: null, $boxshadow: null) {
  border: 0;
  cursor: pointer;
  padding: 1.5rem;
  min-width: $mw;
  color: $color;
  background-color: $bgcolor;
  text-transform: uppercase;
  outline: none;
  box-shadow: $boxshadow;
  font-family: inherit;
  transition: 0.2s;
}

@mixin gradient($color1, $color2, $alpha1: 1, $alpha2: 1, $direction: to right) {
  background-image: linear-gradient($direction, rgba($color1, $alpha1), rgba($color2, $alpha2));
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin centerPosition($pos) {
  position: absolute;
  @if $pos == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $pos == "left" {
    left: 50%;
    transform: translateX(-50%);
  } @else if $pos == "top" {
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin radius($all: null, $tl: $all, $tr: $all, $btl: $all, $btr: $all) {
  border-top-left-radius: $tl;
  border-top-right-radius: $tr;
  border-bottom-right-radius: $btr;
  border-bottom-left-radius: $btl;
}

@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin absolute($args...) {
  @include position(absolute, $args...);
}

@mixin relative($args...) {
  @include position(relative, $args...);
}

@mixin fixed($args...) {
  @include position(fixed, $args...);
}

@mixin toRem($size) {
  font-size: ($size / 16px) * 1rem;
}

@mixin minWidth($breakpoint) {
  @media only screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin maxWidth($breakpoint) {
  @media only screen and (max-width: $breakpoint) {
    @content;
  }
}

// @mixin flex($direction: row, $content: null, $items: null, $wrap: null) {
//   display: flex;
//   flex-direction: $direction;
//   justify-content: $content;
//   align-items: $items;
//   flex-wrap: $wrap;
// }

@mixin absoluteFull() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
@mixin flex($items: stretch, $content: flex-start, $direction: row, $flex: flex, $wrap: null) {
  align-items: $items;
  justify-content: $content;
  flex-direction: $direction;
  display: $flex;
  flex-wrap: $wrap;
}

@mixin hideScroll() {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}
@mixin customScroll($color) {
  &::-webkit-scrollbar {
    width: 0.6rem;
  }
  &::-webkit-scrollbar-track {
    background-color: $light-gray-color;
    border-radius: 2rem;
  }
  &::-webkit-scrollbar-thumb {
    background-color: $color;
    border-radius: 2rem;
  }
}
// text clamp
@mixin textClamp($rows: 1, $size: 100%) {
  display: -webkit-box;
  -webkit-line-clamp: $rows;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $size;
  max-width: $size;
  white-space: pre-wrap;
  word-break: break-word;
}

@mixin hoverEffect($itemClass, $contentClass, $transform: "true") {
  #{$itemClass} {
    position: relative;
    transition: all 0.2s linear;
    z-index: 1;
    will-change: transform;
    #{$contentClass} {
      @include absoluteFull();
      @include flex(center, center, column);
      opacity: 0;
      visibility: hidden;
      transition: all 0.2s linear;
      background: linear-gradient(to bottom, rgba($primary-color, 0.8), rgba($secondary-color, 0.8)),
        no-repeat center / cover;
      // color: #fff;
      z-index: 2;
    }
    @if $transform == "true" {
      &::after {
        content: "";
        @include absoluteFull();
        background-color: $third-color;
        z-index: -1;
        transition: all 0.2s linear;
        will-change: transform;
      }
      &:hover {
        transform: translate(-1rem, -1rem);
        &::after {
          transform: translate(1rem, 1rem);
        }
      }
    }
    &:hover {
      #{$contentClass} {
        opacity: 1;
        visibility: visible;
      }
    }
  }
}

@mixin touchSlider($width: 80%, $gap: 2.5rem, $padding: 1rem) {
  display: grid !important;
  justify-content: flex-start !important;
  grid-auto-columns: $width;
  grid-template-columns: unset;
  grid-column-gap: $gap;
  overflow-x: auto;
  padding: $padding;
  grid-auto-flow: column;
  scroll-snap-type: x mandatory;
  scroll-snap-stop: always;
  @include hideScroll();
  & > * {
    scroll-snap-align: center;
    width: auto;
  }
}
